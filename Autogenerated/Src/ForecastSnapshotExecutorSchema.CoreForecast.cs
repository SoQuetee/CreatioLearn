namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: ForecastSnapshotExecutorSchema

	/// <exclude/>
	public class ForecastSnapshotExecutorSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastSnapshotExecutorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastSnapshotExecutorSchema(ForecastSnapshotExecutorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("116770b7-d605-0dde-2869-eb7e844280ad");
			Name = "ForecastSnapshotExecutor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,4,0,133,84,193,138,219,48,16,61,59,176,255,48,120,123,176,33,216,208,99,226,100,41,105,179,164,116,161,176,187,189,148,178,40,246,196,241,98,75,65,146,211,134,144,127,239,200,178,157,68,196,236,197,72,163,247,198,79,51,111,4,156,85,168,118,44,69,120,65,41,153,18,27,29,45,4,223,20,121,45,153,46,4,143,150,66,98,202,148,254,245,249,110,116,188,27,121,181,42,120,14,121,41,214,172,156,76,22,162,170,8,244,67,228,57,133,167,253,249,243,65,105,172,220,61,165,46,75,76,77,94,21,61,34,71,89,164,103,204,165,2,137,67,241,104,201,82,45,100,129,138,16,132,185,151,152,83,62,88,148,76,169,9,116,114,159,57,219,169,173,208,223,254,97,90,19,190,193,198,113,12,137,170,171,138,201,195,188,221,91,0,42,216,180,76,80,45,85,155,159,191,139,117,212,49,99,135,154,40,68,86,42,1,169,196,205,204,119,116,174,190,139,117,247,119,31,98,67,218,213,235,178,72,33,53,82,7,149,194,4,46,169,68,51,101,239,239,185,44,176,204,232,162,63,101,177,103,26,155,123,121,59,187,1,165,169,105,41,72,100,153,224,229,1,86,212,24,120,43,233,51,3,90,62,49,206,114,148,84,122,109,58,134,50,25,18,49,15,194,233,101,226,149,11,108,83,193,219,230,246,129,109,142,119,143,60,179,194,59,161,66,147,1,48,131,87,133,146,156,198,173,29,220,237,17,114,212,83,80,230,115,114,169,131,98,134,226,77,1,61,202,216,174,60,137,186,150,124,80,60,60,60,88,156,23,12,66,102,214,113,214,141,7,83,210,100,72,215,60,224,248,23,232,118,74,203,218,192,191,200,188,174,144,235,192,175,175,174,237,143,157,58,132,161,109,131,119,50,223,182,16,157,19,158,80,111,69,99,133,198,86,246,208,181,248,181,199,201,205,32,118,216,142,118,143,143,93,66,178,99,146,85,96,94,135,153,171,113,254,178,69,48,49,72,251,96,148,196,13,227,118,130,102,141,26,165,178,228,243,254,138,215,78,199,94,20,89,167,56,112,108,113,45,101,12,171,175,69,179,34,237,9,21,151,6,118,12,98,253,78,199,243,139,191,132,109,219,247,76,246,83,190,202,168,131,193,99,93,100,225,25,248,219,95,246,199,254,31,91,121,71,193,204,209,96,65,102,196,162,21,223,136,224,83,159,162,127,71,204,84,74,242,109,4,231,236,147,227,89,200,201,111,155,60,96,159,232,153,237,177,139,5,103,222,24,140,173,150,69,169,27,65,244,102,7,97,120,55,154,126,168,135,102,242,99,53,167,155,3,108,163,215,65,138,253,7,250,72,39,171,72,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("116770b7-d605-0dde-2869-eb7e844280ad"));
		}

		#endregion

	}

	#endregion

}

